name: Build Worker Files

on:
  push:
    branches:
      - main 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Bundled & Obfuscated Files
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install --only=dev 

      # The 'npm run build' script now handles prepare, build:raw, and obfuscate
      - name: Build Raw and Obfuscated Worker Files
        run: npm run build # This runs prepare-build, build:raw, and obfuscate steps from package.json

      - name: Verify Built Files
        run: |
          ls -l dist/ # Check raw file exists
          ls -l _worker.js # Check obfuscated file exists in root
          echo "Build files generated."
          
      - name: Commit Built Files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Build _worker.js (obfuscated) and dist files [skip ci]"
          # Commit the root _worker.js and the dist directory contents
          file_pattern: "_worker.js dist/" 
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com
          push: true

      # --- Optional Deployment Step ---
      - name: Deploy Obfuscated Worker to Cloudflare (Optional)
        if: env.CLOUDFLARE_API_TOKEN != '' 
        run: |
          echo "Deploying pre-built, obfuscated worker (./_worker.js) using --no-bundle flag..."
          # Deploy the obfuscated file from the root directory (_worker.js)
          npx wrangler deploy ./_worker.js --no-bundle --name ${{ vars.WORKER_NAME || 'revil-zfn' }} 
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }} 
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          # Optional vars
          # CF_VAR_UUID: ${{ secrets.UUID || vars.UUID }}
          # CF_VAR_PROXYIP: ${{ secrets.PROXYIP || vars.PROXYIP }}
